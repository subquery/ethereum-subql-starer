type Block @entity { 
  id: ID! # block_hash: Hash of the block.
  blockNumber: BigInt! # block_number: Number of the block.
  blockTimestamp: String! # block_timestamp: Unix timestamp when the block was added to the blockchain.
  parentHash: String! # parent_hash: Hash of the parent block.
  size: BigInt! # size: Size of this block in bytes.
  extraData: String! # extra_data: Extra data field of this block.
  gasLimit: BigInt! # gas_limit: Maximum gas allowed in this block.
  gasUsed: BigInt! # gas_used: Total gas used by all transactions in this block.
  baseFeePerGas: BigInt # base_fee_per_gas: Reserve price that transactions must pay for inclusion in this block.
  mixHash: String! # mix_hash: 32-byte hash which proves, when combined with the nonce, that a sufficient amount of computation has been carried out on this block.
  nonce: BigInt! # nonce: 8-byte integer in hexadecimal format. Used together with the mix hash to show the proof of work.
  difficulty: BigInt # difficulty: Difficulty for this block.
  totalDifficulty: BigInt # total_difficulty: Accumulated difficulty of the chain until this block.
  miner: String! # miner: Address of the beneficiary to whom the mining rewards were given.
  sha3Uncles: String! # sha3_uncles: SHA3 of the uncles data in the block.
  uncles: [String!] # sha3_uncles: uncles data in the block.
  transactionsRoot: String! # transactions_root: Root of the transaction trie of the block.
  receiptsRoot: String! # receipts_root: Root of the receipts trie of the block.
  stateRoot: String! # state_root: Root of the final state trie of the block.
  logsBloom: String! # logs_bloom: Bloom filter for the logs of the block.
}

type DecodedEvent @entity {
  id: ID! # block_hash: Hash of the block this event was emitted from.
  blockNumber: BigInt! # block_number: Number of the block this event was emitted from.
  blockTimestamp: String! # block_timestamp: Unix timestamp when the block was added to the blockchain.
  transactionHash: String! # transaction_hash: Hash of the transaction this event was emitted from.
  transactionIndex: BigInt! # transaction_index: The transaction's index position in the block.
  logIndex: BigInt! # log_index: The log's index position in the block.
  address: String # address: Address from which this event originated.
  eventHash: String! # event_hash: Keccak hash of the event signature.
  eventSignature: String! # event_signature: Function signature of the event.
  topics: [String!]! # topics: The indexed topics of the event.
  args: [String!] # args: Decoded event arguments serialized as a JSON array.
  removed: Boolean # removed: Whether or not the event was orphaned off the main chain.
}

type Log @entity {
  id: ID! # block_hash: Hash of the block this log was created from.
  blockNumber: BigInt! # block_number: Number of the block this log was created from.
  blockTimestamp: String! # block_timestamp: Unix timestamp when the block was added to the blockchain.
  transactionHash: String! # transaction_hash: Hash of the transaction this log was created from.
  transactionIndex: BigInt! # transaction_index: The transaction's index position in the block.
  logIndex: BigInt! # log_index: The log's index position in the block.
  address: String # address: Address from which this log originated.
  data: String # data: Contains one or more 32-byte non-indexed arguments of the log.
  topics: [String!]! # topics: Array of 0 to 4 32-byte hex of indexed log arguments.
  removed: Boolean # removed: Whether or not the log was orphaned off the main chain.
}


type Receipt @entity {
  id: ID! # block_hash: Hash of the block in which this transaction was located.
  blockNumber: BigInt! # block_number: Number of the block in which this transaction was located.
  blockTimestamp: String! # block_timestamp: Unix timestamp when the block was added to the blockchain.
  transactionHash: String! # transaction_hash: Hash of the transaction.
  transactionIndex: BigInt! # transaction_index: The transaction's index position in the block.
  fromAddress: String! # from_address: Address of the sender.
  toAddress: String # to_address: Address of the receiver.
  contractAddress: String # contract_address: Hexadecimal-encoded address of new contract or absent if no contract was created.
  cumulativeGasUsed: BigInt! # cumulative_gas_used: Gas used by this and all preceding transactions in the block.
  gasUsed: BigInt! # gas_used: Gas used by this transaction alone.
  effectiveGasPrice: BigInt! # effective_gas_price: Actual value per gas deducted from the sender's account.
  logsBloom: String! # logs_bloom: Bloom filter of the logs from this transaction.
  root: String # root: Post-transaction state root.
  status: BigInt # status: Either 1 (success) or 0 (failure).
}


type TokenTransfer @entity {
  id: ID! # block_hash: Hash of the block this event was emitted from.
  blockNumber: BigInt! # block_number: Number of the block this event was emitted from.
  blockTimestamp: String! # block_timestamp: Unix timestamp when the block was added to the blockchain.
  transactionHash: String! # transaction_hash: Hash of the transaction this event was emitted from.
  transactionIndex: BigInt! # transaction_index: The transaction's index position in the block.
  eventIndex: BigInt! # event_index: The event's index position in the block.
  batchIndex: BigInt # batch_index: The transfer's position in the batch transfer event.
  address: String # address: Address from which this event originated.
  eventType: String! # event_type: Token standard that matches the event.
  eventHash: String! # event_hash: Keccak hash of the event signature.
  eventSignature: String! # event_signature: Function signature of the event.
  operatorAddress: String # operator_address: Address of the transfer operator.
  fromAddress: String! # from_address: Address of the previous owner of the token(s).
  toAddress: String! # to_address: Address of the new owner of the token(s).
  tokenId: String # token_id: Identifier of the token(s) being transferred.
  quantity: BigInt! # quantity: Quantity of tokens being transferred.
  removed: Boolean # removed: Whether or not the event was orphaned off the main chain.
}

type Transaction @entity {
  id: ID! # block_hash: Hash of the block in which this transaction was located.
  blockTimestamp: String! # block_timestamp: Unix timestamp when the block was added to the blockchain.
  transactionHash: String! # transaction_hash: Hash of the transaction.
  transactionIndex: BigInt! # transaction_index: The transaction's index position in the block.
  nonce: BigInt! # nonce: Number of transactions made by the sender prior to this one.
  fromAddress: String! # from_address: Address of the sender.
  toAddress: String # to_address: Address of the receiver.
  value: BigInt! # value: Value transferred in Wei. A decimal number represented as a BIGNUMERIC to preserve up to 128-bit numeric precision.
  input: String! # input: Data sent along with the transaction, with a maximum size of 32 bytes.
  gas: BigInt! # gas: Quantity of gas units provided by the sender.
  gasPrice: BigInt # gas_price: Price per gas unit provided by the sender in Wei.
  maxFeePerGas: BigInt # max_fee_per_gas: Maximum fee per unit of gas for this transaction.
  maxPriorityFeePerGas: BigInt # max_priority_fee_per_gas: Maximum priority fee per unit of gas for this transaction.
  transactionType: BigInt! # transaction_type: Type of the transaction. 
  chainId: BigInt # chain_id: Chain ID used in transaction signing.
  # accessList: [AccessList!] # access_list: TODO uncomment when AccessList type is defined.
  r: String # r: ECDSA signature r.
  s: String # s: ECDSA signature s.
  v: String # v: ECDSA signature v.
}
